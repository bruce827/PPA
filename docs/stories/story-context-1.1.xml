<?xml version="1.0" encoding="UTF-8"?>
<story-context id="story-1.1-context" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.1</storyId>
    <title>AI模型配置基础管理功能（简化版）</title>
    <status>Ready</status>
    <generatedAt>2025-10-23</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>个人用户（bruce）</asA>
    <iWant>创建、查看、编辑和删除 AI 模型配置</iWant>
    <soThat>我可以管理多个 AI 服务商的连接信息，为系统的智能分析功能提供基础支撑</soThat>
    
    <tasks>
      <task id="1" title="数据库设计和迁移脚本">
        <subtask id="1.1">创建 server/migrations/001_create_ai_model_configs.js 迁移脚本</subtask>
        <subtask id="1.2">定义表结构（所有字段+默认值），api_key 字段使用 TEXT 类型明文存储</subtask>
        <subtask id="1.3">创建 is_current 唯一索引（WHERE is_current = 1）</subtask>
        <subtask id="1.4">创建 config_name 索引</subtask>
        <subtask id="1.5">测试迁移脚本执行</subtask>
      </task>
      
      <task id="2" title="后端 API 控制器">
        <subtask id="2.1">创建 server/controllers/aiModelController.js</subtask>
        <subtask id="2.2">实现 getAIModels - 获取列表（直接返回，无需解密）</subtask>
        <subtask id="2.3">实现 getAIModel - 获取详情（直接返回，无需解密）</subtask>
        <subtask id="2.4">实现 createAIModel - 创建配置（直接存储，无需加密）</subtask>
        <subtask id="2.5">实现 updateAIModel - 更新配置（直接存储，无需加密）</subtask>
        <subtask id="2.6">实现 deleteAIModel - 删除配置（验证非当前模型）</subtask>
        <subtask id="2.7">在 server/routes/index.js 中注册所有路由</subtask>
      </task>
      
      <task id="3" title="前端路由和菜单配置">
        <subtask id="3.1">在前端路由配置中添加"模型配置"菜单</subtask>
        <subtask id="3.2">配置子菜单"模型应用管理"，路径 /model-config/application</subtask>
        <subtask id="3.3">创建页面目录 frontend/ppa_frontend/src/pages/ModelConfig/Application/</subtask>
        <subtask id="3.4">创建 index.tsx 空页面，验证路由可访问</subtask>
      </task>
      
      <task id="4" title="模型配置列表页面">
        <subtask id="4.1">在 Application/index.tsx 使用 ProTable 组件</subtask>
        <subtask id="4.2">配置列定义（配置名称、服务商、模型、状态、最后测试、操作）</subtask>
        <subtask id="4.3">实现 request 方法调用 GET /api/config/ai-models</subtask>
        <subtask id="4.4">添加当前模型 ⭐ 标记渲染逻辑</subtask>
        <subtask id="4.5">实现排序功能</subtask>
        <subtask id="4.6">添加"+ 新建模型配置"按钮，跳转到表单页面</subtask>
        <subtask id="4.7">操作栏添加编辑、删除按钮</subtask>
      </task>
      
      <task id="5" title="新建/编辑配置表单页面">
        <subtask id="5.1">创建 Application/components/ModelForm.tsx 或单独表单页面</subtask>
        <subtask id="5.2">使用 ProForm 或 Ant Design Form 实现表单</subtask>
        <subtask id="5.3">添加所有表单字段：基础信息、服务配置、基础参数</subtask>
        <subtask id="5.4">API Key 输入框使用 type="text"，无需隐藏显示</subtask>
        <subtask id="5.5">实现表单验证规则</subtask>
        <subtask id="5.6">实现提交逻辑：调用 POST 或 PUT API</subtask>
        <subtask id="5.7">成功后显示消息并跳转回列表页</subtask>
      </task>
      
      <task id="6" title="删除配置功能">
        <subtask id="6.1">在列表页操作栏添加删除按钮</subtask>
        <subtask id="6.2">使用 Popconfirm 组件实现二次确认</subtask>
        <subtask id="6.3">调用 DELETE /api/config/ai-models/:id API</subtask>
        <subtask id="6.4">处理错误：当前模型不允许删除，显示错误提示</subtask>
        <subtask id="6.5">成功后刷新列表并显示 success 消息</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1" title="数据库表创建">
      <description>创建 ai_model_configs 表，包含所有必需字段，api_key 字段使用 TEXT 类型明文存储（个人使用场景），创建唯一索引确保只有一个 is_current=1 的记录，创建 config_name 索引提升查询性能</description>
      <layer>数据库层</layer>
    </criterion>
    
    <criterion id="2" title="后端 API 实现">
      <description>实现 5 个 RESTful API 端点：GET /api/config/ai-models（列表）、GET /api/config/ai-models/:id（详情）、POST /api/config/ai-models（创建）、PUT /api/config/ai-models/:id（更新）、DELETE /api/config/ai-models/:id（删除），所有 API 返回标准格式 {success: boolean, data: any, message?: string}，api_key 字段直接存储和返回，无需加密/解密处理</description>
      <layer>服务层</layer>
    </criterion>
    
    <criterion id="3" title="前端路由和导航">
      <description>在左侧菜单添加"模型配置"菜单项（与"参数配置"并列），添加子菜单"模型应用管理"，路由为 /model-config/application，点击菜单项可正确导航到页面</description>
      <layer>导航层</layer>
    </criterion>
    
    <criterion id="4" title="模型配置列表页面">
      <description>使用 ProTable 组件展示配置列表，显示列：配置名称、服务商、模型、状态、最后测试时间、操作，当前使用的模型在名称前显示 ⭐ 标记，支持按配置名称、服务商排序，包含"+ 新建模型配置"按钮，操作栏包含：编辑、删除按钮</description>
      <layer>UI 层</layer>
    </criterion>
    
    <criterion id="5" title="新建/编辑配置表单">
      <description>使用 ProForm 或 Ant Design Form 实现表单，包含基础信息（配置名称必填、配置描述可选）、服务配置（服务商下拉、API Key 必填 type="text"、API Host 必填、模型名称必填）、基础参数（Temperature 0.0-2.0默认0.7、Max Tokens默认2000、Timeout默认30秒），表单验证：所有必填项非空、Temperature 范围、URL 格式验证，提交成功后显示 success 消息并返回列表页</description>
      <layer>UI 层</layer>
    </criterion>
    
    <criterion id="6" title="删除配置功能">
      <description>删除前二次确认："确定删除 [配置名称]？删除后无法恢复。"，如果尝试删除当前使用的模型，显示错误："请先切换到其他模型"，删除成功后刷新列表并显示 success 消息</description>
      <layer>业务逻辑层</layer>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/prd/model-config-spec.md" title="模型配置功能详细规格 (PRD)">
        <section name="Section 3 - 子模块1: 模型应用管理">
          定义了支持的AI服务商（OpenAI、Azure OpenAI、阿里云、百度、其他）、可配置项（配置名称、API Key、API Host、模型名称、Temperature、Max Tokens、Timeout等）、当前模型选择规则（同一时间只能有一个为当前使用）、连接测试流程
        </section>
        <section name="Section 5 - 数据库设计（简化版）">
          定义 ai_model_configs 表结构，包含15个字段，api_key 使用 TEXT 类型明文存储（个人使用场景），is_current 字段需唯一索引确保只有一个当前模型
        </section>
        <section name="Section 7 - 实现优先级（简化版）">
          定义 P0（MVP）功能：模型配置 CRUD、当前模型选择，移除了加密相关优先级
        </section>
        <section name="Section 8 - 技术实现要点">
          前端技术栈：React + UMI Max, Ant Design Pro (ProTable, ProForm)；后端技术栈：Node.js + Express, SQLite3；关键组件：AIModelList, AIModelForm, modelConfigController.js
        </section>
      </doc>
      
      <doc path="AGENTS.md" title="Agent Instructions">
        <section name="Tech Stack">
          Frontend: UMI Max (React), Ant Design, TypeScript; Backend: Node.js + Express, SQLite 数据库; Build Tools: UMI Max (前端构建), npm/yarn
        </section>
        <section name="Key Commands">
          前端开发: cd frontend/ppa_frontend && npm run dev (端口 8000); 后端启动: cd server && node index.js (端口 3001); 数据库初始化: cd server && node init-db.js
        </section>
        <section name="Non-Obvious Patterns">
          后端使用端口 3001，避免与常见的前端 3000 冲突; 前端代理配置 /api 到 http://localhost:3001; SQLite 数据库文件 ppa.db 自动创建，无需手动配置
        </section>
      </doc>
      
      <doc path="frontend/ppa_frontend/WARP.md" title="Frontend Project Documentation">
        <section name="项目架构">
          目录结构说明，路由在 .umirc.ts 中集中配置，API代理配置（开发环境下，所有 /api 请求会代理到 http://localhost:3001）
        </section>
      </doc>
      
      <doc path="docs/stories/story-1.2.md" title="Story 1.2: 当前模型选择与连接测试">
        <section name="相关功能">
          后续故事，依赖 Story 1.1 的基础 CRUD 功能，扩展 aiModelController.js 添加 testConnection、setCurrentModel、getCurrentModel 方法
        </section>
      </doc>
      
      <doc path="docs/stories/story-1.3.md" title="Story 1.3: 提示词模板基础管理">
        <section name="相关功能">
          并行故事，展示类似的 CRUD 模式，使用 ProTable 和 ProForm 组件，创建 server/controllers/promptTemplateController.js 和对应前端页面
        </section>
      </doc>
    </docs>

    <code>
      <artifact path="server/config/database.js" kind="utility" symbol="getDatabase">
        <lines>1-48</lines>
        <reason>SQLite 数据库连接单例模式，需要在新的 migration 和 controller 中使用相同的连接方式</reason>
      </artifact>
      
      <artifact path="server/controllers/configController.js" kind="controller" symbol="exports">
        <lines>1-50</lines>
        <reason>展示现有 controller 的标准模式：使用 try-catch + next(error)，调用 model 层，返回 JSON 格式，可作为 aiModelController.js 的参考模板</reason>
      </artifact>
      
      <artifact path="server/routes/index.js" kind="routes" symbol="router">
        <lines>1-15</lines>
        <reason>展示如何挂载新路由模块，需要在此文件中添加 router.use('/api/config', aiModelRoutes);</reason>
      </artifact>
      
      <artifact path="frontend/ppa_frontend/src/services/config/" kind="service-directory">
        <reason>展示前端 service 层的组织结构和命名规范，新的 aiModel service 应遵循相同模式</reason>
      </artifact>
    </code>

    <dependencies>
      <backend>
        <package name="express" version="^4.18.2" usage="Web framework for Node.js, already installed"/>
        <package name="sqlite3" version="^5.1.6" usage="SQLite database driver, already installed"/>
        <package name="cors" version="^2.8.5" usage="CORS middleware, already installed"/>
      </backend>
      
      <frontend>
        <package name="@ant-design/pro-components" version="^2.x" usage="ProTable, ProForm components, already installed"/>
        <package name="antd" version="^5.x" usage="Ant Design UI library, already installed"/>
        <package name="@umijs/max" version="^4.x" usage="UMI Max framework, already installed"/>
        <package name="react" version="^18.x" usage="React framework, already installed"/>
      </frontend>
    </dependencies>
  </artifacts>

  <constraints>
    <architectural>
      <constraint type="layering">
        三层架构：Controller (处理HTTP请求/响应) → Model (数据访问) → Database (SQLite)。Controller 不应直接操作数据库，必须通过 Model 层
      </constraint>
      
      <constraint type="database">
        使用 SQLite3，数据库文件 ppa.db 位于 server/ 目录。表名使用 snake_case（ai_model_configs），字段名使用 snake_case
      </constraint>
      
      <constraint type="api-standard">
        所有 API 返回标准格式：{success: boolean, data: any, message?: string}。错误使用 HTTP 状态码（400/404/500）+ 错误信息
      </constraint>
      
      <constraint type="routing">
        后端路由前缀：/api/config/，前端路由前缀：/model-config/。前端开发环境通过代理转发 /api 到 http://localhost:3001
      </constraint>
      
      <constraint type="security">
        简化版本：API Key 明文存储在数据库（TEXT 类型），无需加密/解密。建议使用文件系统权限保护 ppa.db 文件（chmod 600）
      </constraint>
    </architectural>
    
    <technical>
      <constraint type="frontend-patterns">
        使用 UMI Max 约定式路由（pages/ 目录结构决定路由）。使用 ProTable 的 request 属性进行数据加载。使用 message.success/error 显示操作结果
      </constraint>
      
      <constraint type="state-management">
        简单状态使用 React useState/useEffect。复杂状态可使用 UMI 的 model（dva）。当前故事无需全局状态
      </constraint>
      
      <constraint type="form-validation">
        必填项使用 required: true。自定义验证使用 validator 函数。Temperature 范围：0.0-2.0。URL 格式验证使用 type: 'url'
      </constraint>
    </technical>
    
    <business>
      <constraint type="unique-current-model">
        同一时间只能有一个模型 is_current=1。数据库层通过唯一索引强制约束：CREATE UNIQUE INDEX idx_ai_model_configs_is_current ON ai_model_configs(is_current) WHERE is_current = 1
      </constraint>
      
      <constraint type="delete-protection">
        不允许删除当前使用的模型（is_current=1）。删除前必须在 Controller 层检查 is_current 状态，返回 400 错误
      </constraint>
      
      <constraint type="data-integrity">
        配置名称（config_name）必须唯一。服务商类型（provider）必须在允许的值范围内：'openai', 'azure', 'qianwen', 'wenxin', 'other'
      </constraint>
    </business>
  </constraints>

  <interfaces>
    <api name="GET /api/config/ai-models" kind="REST">
      <signature>GET /api/config/ai-models?page=1&amp;pageSize=10&amp;sorter=config_name_ascend</signature>
      <request>
        Query Parameters (optional):
        - page: number (分页页码，默认 1)
        - pageSize: number (每页数量，默认 10)
        - sorter: string (排序字段_方向，如 config_name_ascend)
      </request>
      <response>
        {
          "success": true,
          "data": [
            {
              "id": 1,
              "config_name": "OpenAI GPT-4",
              "description": "Official OpenAI API",
              "provider": "openai",
              "api_key": "sk-...",
              "api_host": "https://api.openai.com",
              "model_name": "gpt-4",
              "temperature": 0.7,
              "max_tokens": 2000,
              "timeout": 30,
              "is_current": 1,
              "is_active": 1,
              "last_test_time": "2025-10-23T10:30:00Z",
              "test_status": "success",
              "created_at": "2025-10-20T08:00:00Z",
              "updated_at": "2025-10-23T10:30:00Z"
            }
          ],
          "total": 5
        }
      </response>
    </api>
    
    <api name="POST /api/config/ai-models" kind="REST">
      <signature>POST /api/config/ai-models</signature>
      <request>
        Body (JSON):
        {
          "config_name": "OpenAI GPT-4",
          "description": "Official OpenAI API",
          "provider": "openai",
          "api_key": "sk-...",
          "api_host": "https://api.openai.com",
          "model_name": "gpt-4",
          "temperature": 0.7,
          "max_tokens": 2000,
          "timeout": 30,
          "is_active": 1
        }
      </request>
      <response>
        {
          "success": true,
          "data": { "id": 6, ...所有字段 },
          "message": "模型配置创建成功"
        }
      </response>
    </api>
    
    <api name="DELETE /api/config/ai-models/:id" kind="REST">
      <signature>DELETE /api/config/ai-models/:id</signature>
      <request>Path Parameter: id (number, 模型配置ID)</request>
      <response>
        Success: { "success": true, "message": "删除成功" }
        Error (当前模型): { "success": false, "message": "无法删除当前使用的模型，请先切换到其他模型" }
      </response>
    </api>
    
    <component name="ProTable" kind="React Component">
      <signature>import { ProTable } from '@ant-design/pro-components';</signature>
      <usage>
        用于列表页展示，关键属性：
        - columns: 列定义数组
        - request: async (params) => 数据加载函数
        - rowKey: 'id' (行唯一标识)
        - search: false (禁用搜索栏)
        - toolBarRender: 自定义工具栏（新建按钮）
      </usage>
    </component>
    
    <component name="ProForm / Form" kind="React Component">
      <signature>import { ProForm } from '@ant-design/pro-components'; 或 import { Form } from 'antd';</signature>
      <usage>
        用于新建/编辑表单，关键属性：
        - onFinish: 提交回调函数
        - initialValues: 初始值（编辑时）
        - Form.Item rules: 验证规则数组
        - Form.Item name: 字段名称（对应 API 字段）
      </usage>
    </component>
  </interfaces>

  <tests>
    <standards>
      本项目当前主要使用手动测试。建议在实现后进行：
      1. 数据库迁移测试：运行 migration 脚本，检查表结构和索引
      2. API 端点测试：使用 Postman 或 curl 测试所有 CRUD 端点
      3. 前端集成测试：手动测试完整的用户流程（创建→编辑→删除）
      4. 边界条件测试：删除当前模型、表单验证、排序功能
      
      未来可添加：
      - 后端单元测试：使用 Jest + SQLite in-memory database
      - 前端组件测试：使用 Jest + React Testing Library
      - E2E 测试：使用 Playwright（可选）
    </standards>
    
    <locations>
      - 后端测试：server/tests/ (当前不存在，未来可创建)
      - 前端测试：frontend/ppa_frontend/src/**/__tests__/ (当前不存在)
      - 集成测试：tests/ (项目根目录已有 server-api-regression.test.md 手动测试文档)
    </locations>
    
    <ideas>
      <test criterion="1">
        - 验证表创建成功：SELECT name FROM sqlite_master WHERE type='table' AND name='ai_model_configs'
        - 验证唯一索引存在：PRAGMA index_list('ai_model_configs')
        - 插入测试数据，验证 is_current 唯一性约束
      </test>
      
      <test criterion="2">
        - 测试 GET /api/config/ai-models 返回空数组（初始状态）
        - 测试 POST 创建配置，验证返回的 id 和所有字段
        - 测试 GET /:id 获取刚创建的配置
        - 测试 PUT 更新配置，验证 updated_at 时间戳更新
        - 测试 DELETE 非当前模型成功
        - 测试 DELETE 当前模型返回 400 错误
      </test>
      
      <test criterion="3">
        - 访问 /model-config/application 路由，验证页面加载
        - 检查左侧菜单是否显示"模型配置"和"模型应用管理"
        - 点击菜单项，验证路由跳转和页面渲染
      </test>
      
      <test criterion="4">
        - 验证 ProTable 正确显示所有配置列
        - 验证当前模型显示 ⭐ 标记
        - 测试排序功能（点击列头排序）
        - 点击"+ 新建模型配置"按钮，验证跳转到表单
        - 点击编辑按钮，验证表单加载现有数据
      </test>
      
      <test criterion="5">
        - 测试必填项验证（留空提交显示错误）
        - 测试 Temperature 范围验证（输入 2.5 显示错误）
        - 测试 URL 格式验证（输入 "abc" 显示错误）
        - 填写所有字段，提交成功，验证跳转回列表并显示 success 消息
        - 编辑模式：修改字段，提交成功
      </test>
      
      <test criterion="6">
        - 点击删除非当前模型，验证 Popconfirm 显示
        - 确认删除，验证列表刷新且该配置消失
        - 点击删除当前模型，验证显示错误消息："请先切换到其他模型"
      </test>
    </ideas>
  </tests>
</story-context>
