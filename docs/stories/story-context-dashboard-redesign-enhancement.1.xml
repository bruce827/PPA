<story-context id="dashboard-redesign-enhancement-1" v="1.0">
  <metadata>
    <epicId>dashboard-redesign-enhancement</epicId>
    <storyId>1</storyId>
    <title>后端API与数据聚合实现</title>
    <status>Ready</status>
    <generatedAt>2025-10-27</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-dashboard-redesign-enhancement-1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>开发者</asA>
    <iWant>实现仪表板所需的所有后端API接口和数据聚合逻辑</iWant>
    <soThat>为前端提供稳定、高效的数据支持，确保仪表板能展示准确的核心指标</soThat>
    <tasks>
      - 在 `server/controllers/dashboardController.js` 中实现新的 API 路由处理函数。
      - 在 `server/services/dashboardService.js` 中编写数据聚合逻辑。
      - 编写单元测试，验证数据聚合逻辑的准确性。
      - 编写集成测试，验证 API 接口响应和数据格式。
    </tasks>
  </story>

  <acceptanceCriteria>
    1.  `GET /api/dashboard/summary` 接口返回项目总数和平均成本。
    2.  `GET /api/dashboard/risk-distribution` 接口返回风险等级分布数据。
    3.  `GET /api/dashboard/cost-composition` 接口返回成本构成数据。
    4.  `GET /api/dashboard/role-cost-distribution` 接口返回角色成本占比数据。
    5.  `GET /api/dashboard/cost-trend` 接口返回项目成本趋势数据。
    6.  `GET /api/dashboard/risk-cost-correlation` 接口返回风险因子与成本关联数据。
    7.  所有API接口响应时间在 500 毫秒以内。
    8.  后端数据聚合逻辑能够兼容旧数据格式（如果存在）。
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec.md" title="PPA - 技术规范" section="技术细节" snippet="定义了仪表板所需的数据指标、API接口设计和数据聚合逻辑。"/>
      <doc path="docs/epics.md" title="PPA - Epic Breakdown" section="Epic Overview" snippet="定义了仪表板内容重新设计与增强的史诗目标和范围。"/>
      <doc path="docs/PRD.md" title="软件项目评估系统 - 产品需求文档" section="核心功能" snippet="描述了数据看板的初始需求。"/>
    </docs>
    <code>
      <file path="server/controllers/dashboardController.js" kind="controller" reason="实现新的API路由处理函数"/>
      <file path="server/routes/dashboard.js" kind="route" reason="定义仪表板API路由"/>
      <file path="server/services/dashboardService.js" kind="service" reason="编写数据聚合逻辑"/>
    </code>
    <dependencies>
      <dependency name="Node.js" version="16+"/>
      <dependency name="Express" version="4+"/>
      <dependency name="SQLite3" version="(通过 `sqlite3` npm包或ORM)"/>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="performance" value="仪表板页面首次加载时间应控制在 2 秒以内。"/>
    <constraint type="performance" value="所有数据 API 响应时间应在 500 毫秒以内。"/>
    <constraint type="compatibility" value="后端数据聚合逻辑能够兼容旧数据格式（如果存在）。"/>
    <constraint type="error_handling" value="后端 API 应返回清晰的错误码和错误信息。"/>
  </constraints>
  <interfaces>
    <interface name="Dashboard Summary API" kind="REST endpoint" signature="GET /api/dashboard/summary" path="server/routes/dashboard.js"/>
    <interface name="Risk Distribution API" kind="REST endpoint" signature="GET /api/dashboard/risk-distribution" path="server/routes/dashboard.js"/>
    <interface name="Cost Composition API" kind="REST endpoint" signature="GET /api/dashboard/cost-composition" path="server/routes/dashboard.js"/>
    <interface name="Role Cost Distribution API" kind="REST endpoint" signature="GET /api/dashboard/role-cost-distribution" path="server/routes/dashboard.js"/>
    <interface name="Cost Trend API" kind="REST endpoint" signature="GET /api/dashboard/cost-trend" path="server/routes/dashboard.js"/>
    <interface name="Risk Cost Correlation API" kind="REST endpoint" signature="GET /api/dashboard/risk-cost-correlation" path="server/routes/dashboard.js"/>
  </interfaces>
  <tests>
    <standards>使用 Mocha/Chai 对 `dashboardService.js` 中的数据聚合逻辑进行单元测试，验证计算结果的准确性。使用 Supertest 对 `GET /api/dashboard/*` 系列 API 接口进行集成测试，验证接口响应和数据格式。</standards>
    <locations>
      <location>server/tests/</location>
    </locations>
    <ideas>
      <idea>单元测试：验证 `dashboardService.js` 中每个数据聚合函数的正确性。</idea>
      <idea>集成测试：验证所有 `/api/dashboard/*` 接口在不同参数下的响应。</idea>
    </ideas>
  </tests>
</story-context>
